FROM quay.io/pypa/manylinux2014_x86_64


ENV CUDA_PKG_VERSION 11-2-11.2.152-1
ENV CUDA_LIB_VERSION 11-2-11.2.2-1
ENV LIBCUBLAS_VERSION 11-2-11.4.1.1043-1
ENV LIBNPP_VERSION 11-2-11.3.2.152-1

RUN echo $'[cuda]\n\
name=cuda\n\
baseurl=https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64\n\
enabled=1\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA'\ > /etc/yum.repos.d/cuda.repo

RUN echo $'[nvidia-ml]\n\
name=nvidia-ml\n\
baseurl=https://developer.download.nvidia.com/compute/machine-learning/repos/rhel8/x86_64\n\
enabled=1\n\
gpgcheck=1\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA'\ > /etc/yum.repos.d/nvidia-ml.repo


RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel8/x86_64/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
    echo "d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c


RUN yum upgrade -y &&\
    yum install -y \
    make \
    # base
    cuda-cudart-$CUDA_PKG_VERSION \
    cuda-compat-11-2 \
    # runtime
    cuda-libraries-$CUDA_LIB_VERSION \
    cuda-nvtx-$CUDA_PKG_VERSION \
    libnpp-$LIBNPP_VERSION \
    libcublas-$LIBCUBLAS_VERSION \
    libnccl-2.8.4-1+cuda11.2 \
    # devel
    cuda-command-line-tools-$CUDA_LIB_VERSION \
    cuda-libraries-devel-$CUDA_LIB_VERSION \
    cuda-minimal-build-$CUDA_LIB_VERSION \
    cuda-cudart-devel-$CUDA_PKG_VERSION \
    cuda-nvprof-$CUDA_PKG_VERSION \
    cuda-nvml-devel-$CUDA_PKG_VERSION \
    libcublas-devel-$LIBCUBLAS_VERSION \
    libnpp-devel-$LIBNPP_VERSION \
    libnccl-devel-2.8.4-1+cuda11.2 \
    # all
    && ln -s cuda-11.2 /usr/local/cuda \
    && yum clean all \
    && rm -rf /var/cache/yum/*

RUN yum install -y yum-plugin-versionlock && yum versionlock libcublas11


# install protobuf
RUN curl -O -L -C - \
    https://github.com/protocolbuffers/protobuf/releases/download/v3.13.0/protobuf-cpp-3.13.0.tar.gz && \
    tar xf protobuf-cpp-3.13.0.tar.gz && \
    rm protobuf-cpp-3.13.0.tar.gz && \
    cd protobuf-3.13.0 && ./autogen.sh && \
    ./configure "CFLAGS=-fPIC" "CXXFLAGS=-fPIC" && \
    make -j$(nproc) && make install && ldconfig && cd .. && rm -rf protobuf-3.13.0

# install cmake
ARG CMAKE_PATH=/cmake
RUN mkdir -p ${CMAKE_PATH} && cd ${CMAKE_PATH} && \
    curl -O -L -C - \
    https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.sh && \
    sh cmake-3.18.2-Linux-x86_64.sh --skip-license && \
    rm cmake-3.18.2-Linux-x86_64.sh && ln -s ${CMAKE_PATH}/bin/cmake /usr/bin/cmake

# install HDF5
RUN curl -O -L -C - \
    https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-1_12_0.tar.gz && \
    tar xf hdf5-1_12_0.tar.gz && \
    rm hdf5-1_12_0.tar.gz && \
    cd hdf5-hdf5-1_12_0 && \
    ./configure --prefix=/usr/local/hdf5 "CFLAGS=-fPIC" "CXXFLAGS=-fPIC" --enable-build-mode=production && \
    make -j$(nproc) && make install && cd .. && rm -rf hdf5-hdf5-1_12_0


ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}
ENV PATH /usr/local/cuda/bin:/usr/local/hdf5:${PATH}